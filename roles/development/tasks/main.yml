---
# File: roles/development/tasks/main.yml

#
# Languages
#

# Go

- name: "remove the Debian Go language packages"
  apt:
    name: "{{ packages }}"
    state: "absent"
  vars:
    packages:
    - "golang-1.10-go"
    - "golang-golang-x-tools"
  tags:
    - "languages"
    - "go"

- name: "create the Go installation directory"
  file:
    name: "{{ go_installation_directory }}"
    state: "directory"
  tags:
    - "languages"
    - "go"

- name: "download and unpack the Go archive"
  unarchive:
    remote_src: "yes"
    src: "{{ go_url }}"
    dest: "{{ go_installation_directory }}"
    creates: "{{ go_home_directory }}"
  register: "go_download_unarchive_result"
  tags:
    - "languages"
    - "go"

- name: "move the go installation to somewhere maintainable"
  command: "mv {{ go_archive_directory }} {{ go_home_directory }}"
  when: "go_download_unarchive_result is changed"
  tags:
    - "languages"
    - "go"

- name: "create a pretty symlink to the latest version"
  file:
    src: "{{ go_home_directory }}"
    dest: "{{ go_installation_directory }}/latest"
    state: "link"
  tags:
    - "languages"
    - "go"

- name: "create symlinks for the go executables"
  file:
    src: "{{ go_home_directory }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: "link"
  with_items:
    - "go"
    - "gofmt"
  tags:
    - "languages"
    - "go"

- name: "set-up the go environment"
  template:
    src: "../files/go.sh"
    dest: "/etc/profile.d"
  tags:
    - "languages"
    - "go"

- name: "create a directory for go tools"
  file:
    path: "{{ go_tools_directory }}/src"
    state: "directory"
  tags:
    - "languages"
    - "go"
    - "go-tools"

- include: "../../install_go_programs.yml"
  vars:
    name: "add useful go programs"
    packages:
      - "github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest"
      - "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
      - "github.com/zimmski/go-mutesting/cmd/go-mutesting@latest"
      - "github.com/go-delve/delve/cmd/dlv@latest"
      - "google.golang.org/protobuf/cmd/protoc-gen-go@latest"
      - "google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"
      - "github.com/fullstorydev/grpcurl/cmd/grpcurl@latest"
      - "github.com/golang-migrate/migrate/v4/cmd/migrate@latest"
      - "github.com/swaggo/swag/cmd/swag@latest"
      - "github.com/praetorian-inc/gokart@latest"
      - "github.com/kisielk/errcheck@latest"
      - "github.com/tsliwowicz/go-wrk@0.9"
      - "github.com/google/pprof@latest"
      - "golang.org/x/tools/gopls@latest"
      - "github.com/sonatype-nexus-community/nancy@latest"
      - "github.com/bradleyfalzon/revgrep/cmd/revgrep@latest"
  tags:
    - "languages"
    - "go"
    - "go-tools"

- include: "../../install_go_programs.yml"
  vars:
    name: "install gotip for beta feature installation"
    packages:
      - "golang.org/dl/gotip@latest"
  tags:
    - "go"
    - "go-beta"

- name: update to latest Go beta
  command: "/usr/share/go-tools/bin/gotip download"
  register: "gotip_download_result"
  changed_when: "'Previous HEAD' in gotip_download_result.stderr"
  tags:
    - "go"
    - "go-beta"

- include: "../../install_go_programs.yml"
  vars:
    name: "install ko for Go-Kubernetes development"
    packages:
      - "github.com/google/ko@latest"
  tags:
    - containerization
    - kubernetes
    - ko


- name: add ko's bash completion
  shell:
    cmd: "/usr/share/go-tools/bin/ko completion bash > /etc/bash_completion.d/ko"
  when: "go_get_result.changed"
  changed_when: "go_get_result.changed"
  tags:
    - containerization
    - Kubernetes
    - ko

#
# Editors
#

- name: "add the full-featured versions of vim"
  apt:
    name: "{{ packages }}"
    state: "present"
  vars:
    packages:
    - "vim"
    - "vim-gtk"
  tags:
    - "editors"
    - "vim"

- name: add the typora signing key
  apt_key: 
    keyserver: "keyserver.ubuntu.com"
    id: "BA300B7755AFCFAE"
    state: "present"
  tags:
    - editors

- name: add the typora repository
  apt_repository: 
    repo: "deb https://typora.io/linux ./"
    state: "present"
    mode: "644"
  tags:
    - editors

- name: install typora
  apt:
    pkg: "typora"
    state: "present"
  tags:
    - editors
    
#
# NodeJS
#

- name: add the NodeJS signing key
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: "present"
  tags:
  - "node"

- name: add the NodeJS repositories
  apt_repository:
    repo: "{{ item }}"
    state: "present"
    mode: "644"
  with_items:
    - deb https://deb.nodesource.com/{{ nodejs_repo }} focal main
    - deb-src https://deb.nodesource.com/{{ nodejs_repo }} focal main
  tags:
  - "node"
    
- name: add NodeJS and NPM
  apt:
    pkg: 
    - "nodejs"
    state: "latest"
  tags:
  - "node"

#
# Virtualization
#

- name: "install vagrant"
  apt:
    pkg:
    - "vagrant"
    state: "latest"
  tags:
  - vagrant
  - virtualization

- name: "install virtualbox (Ubuntu)"
  apt:
    pkg:
    - "virtualbox"
    - "virtualbox-qt"
    state: "latest"
  when: ansible_distribution == "Ubuntu"
  tags:
  - "virtualbox"
  - "virtualization"

- name: "install fasttrack repo key (Debian)"
  apt:
    pkg:
    - "fasttrack-archive-keyring"
    state: "present"
  when: ansible_distribution == "Debian"
  tags:
  - "virtualbox"
  - "virtualization"

- name: "install fastrack repo (Debian)"
  apt_repository:
    repo: "deb https://fasttrack.debian.net/debian-fasttrack/ {{ ansible_distribution_release }}-fasttrack main contrib"
    state: "present"
    update_cache: "yes"
  when: ansible_distribution == "Debian"
  tags:
  - "virtualbox"
  - "virtualization"

- name: "install staging repo (Debian)"
  apt_repository:
    repo: "deb https://fasttrack.debian.net/debian-fasttrack/ {{ ansible_distribution_release }}-backports-staging main contrib"
    state: "present"
    update_cache: "yes"
  when: ansible_distribution == "Debian"
  tags:
  - "virtualbox"
  - "virtualization"

- name: "install virtualbox (Debian)"
  apt:
    pkg:
    - "virtualbox"
    - "virtualbox-qt"
    state: "present"
  when: ansible_distribution == "Debian"
  tags:
  - "virtualbox"
  - "virtualization"

#
# Source Code Management
#

- name: "install Github CLI key"
  apt_key:
    id: "C99B11DEB97541F0"
    keyserver: "keyserver.ubuntu.com"
    state: "present"
  tags:
  - "github"
  - "git"

- name: "install Github repository"
  apt_repository:
    repo: "deb https://cli.github.com/packages focal main"
    state: "present"
  tags:
    - "github"
    - "git"

- name: "install Github CLI"
  apt:
    name: "gh"
    state: "latest"
  tags:
    - "github"
    - "git"
      
- name: install linux tools for git
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - git
    - git-doc
    - git-svn
  tags:
    - git

#
# Install Meld
#
- name: install meld
  apt:
    name: "meld"
    state: "latest"
  tags:
    - git
    - meld


- name: "install linux tools for Subversion"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "subversion"
    - "libsvn-java"
  tags:
    - "subversion"
 
#
# Bug tracking
#

- include: "../../install_go_programs.yml"
  vars:
    name: "install git-bug"
    packages:
    - "github.com/MichaelMure/git-bug@v0.7.2"
  tags:
  - "bug-tracking"
  - "git-bug"

#
# Build tools
#

- name: "install Java build tools"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "ant"
    - "gradle"
    - "maven"

- name: "install build tools"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "make"
    - "remake"
  tags:
  - "build-tools"
  - "make"

- include: "../../install_go_programs.yml"
  vars:
    name: "install bazel"
    packages:
    - "github.com/bazelbuild/bazelisk@latest"
  tags:
  - "build-tools"
  - "bazel"

- name: "add a pretty symlink for bazel"
  file:
    src: "/usr/share/go-tools/bin/bazelisk"
    path: "/usr/bin/bazel"
    state: "link"
  tags:
  - "build-tools"
  - "bazel"

- name: "install protobuf compiler"
  snap:
    name: "protobuf"
    classic: yes
    state: "present"
  tags:
  - "protobuf"

#
# File formating tools
#

- name: install file formating tools
  apt:
    name: "python3-demjson"
    state: "latest"

#
# LDAP tools
#

- name: "install linux tools for LDAP"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "ldap-utils"
    - "ldapvi"
  tags:
    - "ldap"

#
# Networking
#

- name: "add packages that are useful when developing networking software"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "wireshark"
    - "nmapsi4"
  tags:
    - "networking"

#
# Graphics
#

- name: "add packages that are useful for designing UIs"
  apt:
    name: "{{ packages }}"
    state: "latest"
  vars:
    packages:
    - "gpick"
    - "gimp"
    - "inkscape"
    - "screenruler"
  tags:
    - "graphics"

#
# Inform
#

- name: "add packages needed to develop IF games"
  apt:
    pkg:
    - "inform"
    - "inform-docs"
    state: "latest"
  vars:
    packages:
  when: ansible_distribution != "Debian"
  tags:
    - "interactive-fiction"
    - "inform"

- name: "add stretch repositories needed for Inform7 dependencies"
  apt_repository:
    repo: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
  - "deb http://deb.debian.org/debian stretch main"
  - "deb-src http://deb.debian.org/debian stretch main"
  when: ansible_distribution == "Debian"
  tags:
  - "interactive-fiction"
  - "inform"

- name: "add old dependencies needed for Inform7"
  apt:
    pkg:
    - libgoocanvas3
    - libgtkspell0
    - libjavascriptcoregtk-1.0-0
    - libwebkitgtk-1.0-0
    - libgtksourceview2.0-0
    state: present
  when: ansible_distribution == "Debian"
  tags:
  - "interactive-fiction"
  - "inform"

- name: "install Inform7"
  apt:
    deb: http://inform7.com/apps/6M62/gnome-inform7_6M62-1_amd64.deb
    state: "present"
  when: ansible_distribution == "Debian"
  tags:
    - "interactive-fiction"
    - "inform"

- name: "remove stretch repositories needed for Inform7 dependencies"
  apt_repository:
    repo: "{{ item }}"
    state: absent
    update_cache: yes
  with_items:
  - "deb http://deb.debian.org/debian stretch main"
  - "deb-src http://deb.debian.org/debian stretch main"
  when: ansible_distribution == "Debian"
  tags:
  - "interactive-fiction"
  - "inform"

- name: "add packages needed to play IF games"
  apt:
    pkg:
    - "frotz"
    - "zoom-player"
    state: "latest"
  tags:
    - "interactive-fiction"

# RFC CLI browser

- name: "create the home directory for the RFC browser"
  file:
    name: "{{ rfc_home_directory }}"
    state: "directory"
  tags:
  - rfc

- name: "install the RFC browser"
  get_url:
    url: "{{ rfc_url }}"
    dest: "{{ rfc_home_directory }}"
    mode: "755"
  tags:
  - rfc

- name: "create a pretty symlink to the latest version of the RFC browser"
  file:
    src: "{{ rfc_home_directory }}"
    dest: "{{ rfc_installation_directory }}/latest"
    state: "link"
  tags:
  - "rfc"

- name: "create a symlink to the RFC browser executable"
  file:
    src: "{{ rfc_installation_directory }}/latest/{{ rfc_file }}"
    dest: "/usr/bin/{{ rfc_file }}"
    state: "link"
  tags:
  - "rfc"

#
# Test tools
#

- name: "install siege for HTTP load testing"
  apt:
    pkg:
    - "siege"
    state: "latest"
  tags:
  - "testing"
  - "siege"
