---
# File: roles/containerization/tasks/main.yml

#
# Docker
#

- name: install docker for container execution environment
  apt:
    pkg:
      - docker.io
      - docker-compose
    state: latest
  tags:
    - containerization
    - docker

- name: "install Kubernetes Lens"
  apt:
    deb: "{{ lens_url }}"
    state: "present"
  tags:
  - containerization
  - kubernetes
  - lens

- name: "disable Lens login screen"
  lineinfile:
    dest: "/etc/hosts"
    # regexp: "^127.0.2.1\tapp.k8slens.dev$"
    line: "127.0.2.1\tapp.k8slens.dev"
    insertbefore: "^$"
    firstmatch: "yes"
    state: present
  tags:
  - containerization
  - kubernetes
  - lens
  - stuff

#
# HyperKube is now deprecated in favor of MiniKube
#

- name: remove the directory for the convenience scripts
  file: name={{ k8s_installation_directory }}/scripts state=directory
    state=absent
  tags:
    - containerization
    - kubernetes

- name: remove scripts from the user's path
  file: path={{ item }}
    state=absent
  with_items:
    - /usr/bin/kube-up
    - /usr/bin/kube-down
  tags:
    - containerization
    - kubernetes

#
# Minikube
#

- name: create the installation directory for MiniKube
  file: name={{ minikube_home_directory }} state=directory
  tags:
    - containerization
    - kubernetes
    - minikube

- name: download the MiniKube executable
  get_url:
    url: "{{ minikube_url }}"
    dest: "{{ minikube_home_directory }}/{{ minikube_file }}"
    checksum: "{{ minikube_checksum }}"
    mode: "755"
  register: download_result
  tags:
    - containerization
    - kubernetes
    - minikube

- name: create a pretty symlink to the latest MiniKube version
  file: src={{ minikube_home_directory }}
    path={{ minikube_installation_directory }}/latest
    state=link
  when: download_result is changed
  tags:
    - containerization
    - kubernetes
    - minikube

- name: put Minikube on the user's path
  file: src={{ minikube_installation_directory }}/latest/{{ minikube_file }}
    path=/usr/bin/minikube
    state=link
  tags:
    - containerization
    - kubernetes
    - minikube

- name: generate Minikube bash completion
  shell: minikube completion bash > /etc/bash_completion.d/minikube
  tags:
    - containerization
    - kubernetes
    - minikube

#
# micro-k8s
#

- name: remove microk8s with option --classic
  snap:
    name: microk8s
    classic: yes
    state: absent
  tags:
    - containerization
    - kubernetes
    - microk8s

#
# Helm
#

- name: "create the installation directory for helm"
  file:
    name: "{{ helm_installation_directory }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - helm

- name: "download the Helm release archive"
  get_url:
    url: "{{ helm_url }}"
    dest: "~/{{ helm_file }}"
    checksum: "{{ helm_checksum }}"
    mode: "755"
  register: "helm_download_result"
  tags:
    - containerization
    - kubernetes
    - helm

- name: "expand the Helm archive"
  unarchive:
    src: "~/{{ helm_file }}"
    dest: "{{ helm_installation_directory }}"
    copy: "no"
    creates: "{{ helm_home_directory }}"
  register: "helm_unarchive_result"
  tags:
    - containerization
    - kubernetes
    - helm

- name: "rename the Helm archive directory to the version number"
  command: "mv {{ helm_installation_directory }}/linux-amd64 {{ helm_home_directory }}"
  when: "helm_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - helm

- name: "make a pretty symlink to the latest version"
  file:
    src: "{{ helm_home_directory }}"
    dest: "{{ helm_installation_directory }}/latest"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - helm

- name: "create a symlink to the executable"
  file:
    src: "{{ helm_installation_directory }}/latest/helm"
    dest: "/usr/bin/helm"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - helm

# - name: "download Helm's bash completions"
#   get_url:
#     url: "{{ helm_bash_url }}"
#     dest: "{{ helm_installation_directory }}/latest"
#     mode: "755"
#   tags:
#     - containerization
#     - kubernetes
#     - helm

# - name: "create a symlink to Helm's bash completion"
#   file:
#     src: "{{ helm_installation_directory }}/latest/{{ helm_bash_file }}"
#     dest: "/etc/bash_completion.d/helm-{{ helm_bash_file }}"
#     state: "link"
#   tags:
#     - containerization
#     - kubernetes
#     - helm

- name: "generate and install Helm's bash completions"
  shell:
    cmd: "helm completion bash > /etc/bash_completion.d/helm"
  tags:
    - containerization
    - kubernetes
    - helm

#
# SOPS
#

- include: "../../install_go_programs.yml"
  vars:
    name: "install Mozilla SOPS for secret management"
    packages:
    - "go.mozilla.org/sops/v3/cmd/sops@latest"
  tags:
  - "containerization"
  - "kubernetes"
  - "secrets"
  - "sops"

#
# Istio
#

- name: "create the installation directory for Istio"
  file:
    name: "{{ istio_installation_directory }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "download the Istio release archive"
  get_url:
    url: "{{ istio_url }}"
    dest: "~/{{ istio_file }}"
    checksum: "{{ istio_checksum }}"
    mode: "755"
  register: "istio_download_result"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "expand the Istio archive"
  unarchive:
    src: "~/{{ istio_file }}"
    dest: "{{ istio_installation_directory }}"
    copy: "no"
    creates: "{{ istio_home_directory }}"
    mode: "755"
  when: "istio_download_result is changed"
  register: "istio_unarchive_result"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "rename the Istio archive directory to the version number"
  command: "mv {{ istio_installation_directory }}/istio-{{ istio_version }} {{ istio_home_directory }}"
  when: "istio_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "make a pretty symlink to the latest version"
  file:
    src: "{{ istio_home_directory }}"
    dest: "{{ istio_installation_directory }}/latest"
    state: "link"
  when: "istio_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "create a symlink to the istioctl executable"
  file:
    src: "{{ istio_installation_directory }}/latest/bin/istioctl"
    dest: "/usr/bin/istioctl"
    state: "link"
  when: "istio_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "generate istioctl's bash completion"
  command: "istioctl collateral --bash --outputDir {{ istio_installation_directory }}/latest/bin"
  when: "istio_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - istio

- name: "create a symlink to istioctl's bash completion"
  file:
    src: "{{ istio_installation_directory }}/latest/bin/istioctl.bash"
    dest: "/etc/bash_completion.d/istioctl.bash"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - istio

#
# Terraform
#

- name: "create the installation directory for Terraform"
  file:
    name: "{{ terraform_installation_directory }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "download the Terraform release archive"
  get_url:
    url: "{{ terraform_url }}"
    dest: "~/{{ terraform_file }}"
    mode: "755"
  register: "terraform_download_result"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "expand the Terraform archive"
  unarchive:
    src: "~/{{ terraform_file }}"
    dest: "{{ terraform_installation_directory }}"
    copy: "no"
    creates: "{{ terraform_home_directory }}"
  when: "terraform_download_result is changed"
  register: "terraform_unarchive_result"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "rename the Terraform archive directory to the version number"
  command: "mv {{ terraform_installation_directory }}/terraform {{ terraform_home_directory }}"
  when: "terraform_unarchive_result is changed"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "make a pretty symlink to the latest version of Terraform"
  file:
    src: "{{ terraform_home_directory }}"
    dest: "{{ terraform_installation_directory }}/latest"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "create a symlink to the terraform executable"
  file:
    src: "{{ terraform_installation_directory }}/latest"
    dest: "/usr/bin/terraform"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - terraform

- name: "set-up Terraform's bash completion"
  template:
    src: "../files/terraform.bash"
    dest: "/etc/bash_completion.d/"
  tags:
    - containerization
    - kubernetes
    - terraform

#
# Kail
#

- name: "create the installation directory for kail"
  file:
    name: "{{ kail_home_directory }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - kail

- name: "download the kail release archive"
  get_url:
    url: "{{ kail_url }}"
    dest: "~/{{ kail_file }}"
  register: "kail_download_result"
  tags:
    - containerization
    - kubernetes
    - kail

- name: "expand the kail archive"
  unarchive:
    src: "~/{{ kail_file }}"
    dest: "{{ kail_home_directory }}"
    copy: "no"
    creates: "{{ kail_home_directory }}/kail"
  when: "kail_download_result is changed"
  register: "kail_unarchive_result"
  tags:
    - containerization
    - kubernetes
    - kail

- name: "make a pretty symlink to the latest version of kail"
  file:
    src: "{{ kail_home_directory }}"
    dest: "{{ kail_installation_directory }}/latest"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - kail

- name: "create a symlink to the kail executable"
  file:
    src: "{{ kail_installation_directory }}/latest/kail"
    dest: "/usr/bin/kail"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - kail

#
# Stern
#

- name: "create the installation directory for stern"
  file:
    name: "{{ stern_installation_directory }}/{{ stern_version }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - stern

- name: "download the stern release"
  get_url:
    url: "{{ stern_url }}"
    dest: "~/{{ stern_file }}.tar.gz"
    mode: "755"
  register: "stern_download_result"
  tags:
    - containerization
    - kubernetes
    - stern

- name: "unarchive the stern file"
  unarchive:
    src: "~/{{ stern_file }}.tar.gz"
    dest: "{{ stern_installation_directory }}/{{ stern_version }}"
    copy: "no"
    creates: "{{ stern_installation_directory }}/{{ stern_version }}/stern"
  when: "stern_download_result is changed"
  register: "stern_unarchive_result"
  tags:
    - containerization
    - kubernetes
    - stern

- name: "make a pretty symlink to the latest version of stern"
  file:
    src: "{{ stern_home_directory }}"
    dest: "{{ stern_installation_directory }}/latest"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - stern

- name: "create a symlink to the stern executable"
  file:
    src: "{{ stern_installation_directory }}/latest/stern"
    dest: "/usr/bin/stern"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - stern

#
# fluxctl
#

- name: "create the installation directory for fluxctl"
  file:
    name: "{{ fluxctl_home_directory }}"
    state: "directory"
  tags:
    - containerization
    - kubernetes
    - fluxctl

- name: "download the fluxctl release"
  get_url:
    url: "{{ fluxctl_url }}"
    dest: "{{ fluxctl_home_directory }}/fluxctl"
    mode: "755"
  register: "fluxctl_download_result"
  tags:
    - containerization
    - kubernetes
    - fluxctl

- name: "make a pretty symlink to the latest version of fluxctl"
  file:
    src: "{{ fluxctl_home_directory }}"
    dest: "{{ fluxctl_installation_directory }}/latest"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - fluxctl

- name: "create a symlink to the fluxctl executable"
  file:
    src: "{{ fluxctl_installation_directory }}/latest/fluxctl"
    dest: "/usr/bin/fluxctl"
    state: "link"
  tags:
    - containerization
    - kubernetes
    - fluxctl
